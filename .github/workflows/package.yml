name: Package CI


on:
  push:
    paths:
      - ".github/workflows/package.yml"
      - "deps.edn"
      - 'build/package.clj'
      - "src/core/**/*.css"
      - "src/core/**/*.clj"
      - "src/core/**/*.cljc"
      - "src/test/**/*.clj"
      - "src/test/**/*.cljc"
    branches:
      - master
  pull_request:
    branches:
      - master


env:
  node-version: '17'
  java-version: '17'
  clojure-cli: latest
  library: io.github.alchemiakr/web-components


jobs:
  test:
    if: "!(contains(github.event.head_commit.message, 'ci skip') || contains(github.event.head_commit.message, 'skip ci'))"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ "17" ]
        clojure: [ "1.11" ]
    name: test @ JDK & CLJ
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.java-version }}
      - name: Preparation
        run: |
          cp .ci/settings.xml ~/.m2/settings.xml
      - name: Set up clojure-cli
        uses: DeLaGuardo/setup-clojure@9.4
        with:
          cli: ${{ env.clojure-cli }}
      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
          key: cljdeps-${{ runner.os }}-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            cljdeps-${{ runner.os }}-


      - name: Test runner
        env:
          TESTOPT: "-X:provided:test:test-runner"
        run: |
          clojure $TESTOPT


  package:
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.java-version }}
      - name: Preparation
        run: |
          cp .ci/settings.xml ~/.m2/settings.xml
          mvn dependency:get -Dartifact=org.apache.maven.plugins:maven-deploy-plugin:2.8
      - name: Set up clojure-cli
        uses: DeLaGuardo/setup-clojure@9.4
        with:
          cli: ${{ env.clojure-cli }}
      - name: Cache clojure dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.deps.clj
          key: cljdeps-${{ runner.os }}-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            cljdeps-${{ runner.os }}-


      - name: Make package
        run: |
          clojure -T:build jar :lib ${{ env.library }}


      - name: Deploy maven package
        env:
          CLOJARS_USERNAME: ${{ secrets.CLOJARS_USERNAME }}
          CLOJARS_PASSWORD: ${{ secrets.CLOJARS_PASSWORD }}
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn deploy:deploy-file -DpomFile="pom.xml" -Dfile="target/package.jar" -Dpackaging=jar -DrepositoryId="clojars" -Durl="https://clojars.org/repo"
          mvn deploy:deploy-file -DpomFile="pom.xml" -Dfile="target/package.jar" -Dpackaging=jar -DrepositoryId="github.com/alchemiakr/web-components" -Durl="https://maven.pkg.github.com/alchemiakr/web-components"


      # npm package


      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          registry-url: 'https://registry.npmjs.org'
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Build NPM Package
        run: |
          clojure -T:build npm
      - name: Publish NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          pushd dist
          npm publish --access=public
          popd


      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: ${{ env.node-version }}
      #     registry-url: 'https://npm.pkg.github.com'
      # - name: Publish GHPR
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     pushd dist
      #     npm publish
      #     popd


      # summary


      - name: Push a commit using the built-in token
        run: |
          git pull origin master
          git config --local user.name $GITHUB_ACTOR
          git config --local user.email $(git --no-pager show --format="<%ae>" -s HEAD)
          if git status | grep -q "working tree clean"
            echo "No changes since last run"
          then
            git add -- pom.xml package.json package-lock.json
            git commit -m "$(clojure -X:build:maven-tool print-pom-version) [package.yml] [ci skip]"
            git remote -v
            git push
          fi


      - name: Discord action job digest notification
        uses: sarisia/actions-status-discord@v1
        if: always() # Pick up events even if the job fails or is canceled.
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
